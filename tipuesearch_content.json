{"pages":[{"title":"About","text":"About code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} About 1 About 1 About Nothing!!!","tags":"Tech","url":"https://cnewbie.github.io/pages/about.html"},{"title":"Pandoc Markdown 文档","text":"Pandoc Markdown 文档 code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; position: absolute; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; } pre.numberSource a.sourceLine:empty { position: absolute; } pre.numberSource a.sourceLine::before { content: attr(data-line-number); position: absolute; left: -5em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; font-weight: bold; } /* Alert */ code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */ code span.at { color: #7d9029; } /* Attribute */ code span.bn { color: #40a070; } /* BaseN */ code span.bu { } /* BuiltIn */ code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */ code span.ch { color: #4070a0; } /* Char */ code span.cn { color: #880000; } /* Constant */ code span.co { color: #60a0b0; font-style: italic; } /* Comment */ code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */ code span.do { color: #ba2121; font-style: italic; } /* Documentation */ code span.dt { color: #902000; } /* DataType */ code span.dv { color: #40a070; } /* DecVal */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.fl { color: #40a070; } /* Float */ code span.fu { color: #06287e; } /* Function */ code span.im { } /* Import */ code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */ code span.kw { color: #007020; font-weight: bold; } /* Keyword */ code span.op { color: #666666; } /* Operator */ code span.ot { color: #007020; } /* Other */ code span.pp { color: #bc7a00; } /* Preprocessor */ code span.sc { color: #4070a0; } /* SpecialChar */ code span.ss { color: #bb6688; } /* SpecialString */ code span.st { color: #4070a0; } /* String */ code span.va { color: #19177c; } /* Variable */ code span.vs { color: #4070a0; } /* VerbatimString */ code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */ Pandoc Markdown 文档 1 Philosophy 哲学 2 Paragraphs 段落 3 Headers 标题 3.1 标题风格 3.2 \bHeader identifiers 标题标识符 4 Block quotations 块引用 5 Verbatim(code) blocks 代码块 5.1 Indented code blocks 缩进代码块 5.2 Fenced code blocks 围栏代码块 6 Line blocks 行块 7 Lists 列表 7.1 Bullet lists 项目列表／无序列表 7.2 Block content In list items 列表内的块 7.3 Ordered lists 有序列表 7.4 Definition lists 列表定义 7.5 Numbered example lists 编号示例列表 7.6 Compact and loose lists 紧凑／稀疏列表 7.7 Ending a list 结束列表 8 Horzontal rules 水平分隔线 9 Tables 表格 10 Metadata blocks 元数据块 11 Backslash escapes 反斜杠转义 12 Inline formatting 内联样式 12.1 Emphasis 强调 12.2 Strikeout 删除线 12.3 Superscripts and subscripts 上下标 12.4 Verbatim 13 Math 数学公式 14 Raw HTML 15 Generic raw attribute 16 LaTeX macros 17 Links 链接 17.1 Automatic links 自动链接 17.2 Inline links 内联链接 17.3 Reference links 参考链接 17.4 Internal links 内部链接 18 Images 图片 19 Divs and Spans 20 Footnotes 脚注 21 Citations 引用 22 Non-pandoc extensions 23 Markdown variants Markdwon 变种 23.1 markdown_phpextra(PHP Markdown Extra) 23.2 markdown_mmd(MultiMarkdown) 23.3 markdown_strict(Markdown.pl) 23.4 gfm(GitHub-Flavored Markdown) 24 引用 1 Philosophy 哲学 Markdown is designed to be easy to write,and,even more importantly,easy to read. A Markdown-formatted document should be publishable as-is,as plain text,without looking like it's been marked up with tags or formatting instructions. - John Gruber 2 Paragraphs 段落 一个段落包含一行或多行文字，通过行后跟随一个或多个空白行，换行符（newlines）和空格（spaces）作用一样，如果需要\b硬换行（hard line break），在行后添加两个以上的空格。 Extension escaped_line_breaks 反斜杠（backslash）后跟随换行符也是一种硬换行 Note 在多行和表格中，这种方式是唯一的方式进行硬换行，因为表格中空格会被忽略。 3 Headers 标题 3.1 标题风格 两种风格的标题 Setext 和 ATX Setext 风格 A level-one header ================== A level-two header ------------------ ATX 风格 # A level-one header ## A level-two header ### A level-three header ### Extension blank_before_header 标准 Markdown 语法不需要在标题前空白行，Pandoc 需要 空白行 （除了在文档开头）。原因是可能由于自动断行后产生歧义。 I like several of their flavors of ice cream: #22, for example, and #5. Extension space_in_atx_header 大多数 Markdown 语法不需要在 # 与标题文字间添加 空格 ，但是Pandoc需要空格。 3.2 \bHeader identifiers 标题标识符 Extension header_attributes 可以标题文字后添加属性， {#identifier .class .class key=value key=value} 。本语法兼容 PHP Markdown Extra 添加的\b属性通常用于 HTML 或基于 HTML 的格式文件\b如 EPUB 。 Extension implicit_header_references Pandoc 默认为标题创建引用链接,并可直接使用,\b如果有多个相同标题，引用将指向第一个出现的标题。引用大小写不敏感。 [Header identifiers in HTML] or [Header identifiers in HTML][] or [the section on header identifiers][header identifiers in HTML] or [Header identifiers in HTML](#header-identifiers-in-html) 4 Block quotations 块引用 Markdown 使用 email 传统引用文字， 每行前面都有一个 > 字符和一个可选空格， > 符号不需要从最左边开始，但是不应该缩进超过三个空格。 > This is a block quote. This > paragraph has two lines. > > 1. This is a list inside a block quote. > 2. Second item. lazy form,需要在块引用的第一行使用 > 符号即可。 > This is a block quote. This paragraph has two lines. > 1. This is a list inside a block quote. 2. Second item. nested quote,块引用可以多层嵌套 > This is a block quote. > > > A block quote within a block quote. Note 如果在 > 符号后跟随可选空格，这些空格将被解析为块引用的一部分而不是内容缩进，如果需要产生缩进你需要在 > 符号后输入 五个空格 Extension blank_before_blockquote 标准语法不需要在块引用前添加 空白行 ，Pandoc需要（除了文档开头），原因是自动断行造成歧义，除非指定 markdown_strict 标志，Pandoc不认为以下代码是引用嵌套。 > This is a block quote. >> Nested. 5 Verbatim(code) blocks 代码块 5.1 Indented code blocks 缩进代码块 文本缩进四个空格或一个tab键，将被视为代码块，保留空格、换行，特殊字符不会触发样式。初始缩进 四个空格或tab 将在输出中移除。 Note 代码块中空白行不需要四个空格缩进 5.2 Fenced code blocks 围栏代码块 Extension fenced_code_blocks 除了标准缩进代码块，Pandoc支持围栏代码块，使用 ~ 符号，在代码块前后添加一行符号，后行长度至少和起始行一样。 ~~~~~ if (a > 3) { moveShip(5 * gravity, DOWN); } ~~~~~ 围栏代码块需要空白行分离周围普通文本，如果代码中包含 ~ 符号需要使用更长的波浪线行。 Extension backtick_code_blocks 同 fenced_code_blocks 使用 ` 代替 ~ 符号 Extension fenced_code_attributes 围栏代码块可附加属性 ~~~~ {#mycode .haskell .numberLines startFrom=\"100\"} qsort [] = [] qsort (x:xs) = qsort (filter (< x) xs) ++ [x] ++ qsort (filter (>= x) xs) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mycode 是标识符， haskell 和 numberLines 表示classes， startForm 属性值为100。这些属性值可以用于语法高亮 syntax highlight <pre id= \"mycode\" class= \"haskell numberLines\" startFrom= \"100\" > <code> ... </code> </pre> numberLines 将显示代码行数，以下是快捷（shortcut）形式 ~~~{.haskell} qsort [] = [] ~~~ equal ~~~haskell qsort [] = [] ~~~ 如果 fenced_code_attributes 拓展关闭，但是文本中包含属性值，这些属性将会被打印。 6 Line blocks 行块 Extension line_blocks 行块是一系列以垂直符 | 开头后接空格的文本行，断行、空格将被保留。用于诗词和地址。借鉴与 reStructuredText | The limerick packs laughs anatomical | In space that is quite economical. | But the good ones I've seen | So seldom are clean | And the clean ones so seldom are comical | 200 Main St. | Berkeley, CA 94718 7 Lists 列表 7.1 Bullet lists 项目列表／无序列表 项目列表使用项目符（ * , + , - ）开头。 * one * two * three 默认生成的项目列表紧凑，如果需要稀疏列表\b，可以在将列表项格式化为段落，在列表项之间添加空格 * one * two * three Note 列表不需要左边缘对齐，可以使用一到三个空格缩进， 项目列表符后必须有空格 7.2 Block content In list items 列表内的块 列表项可能包含多个段落或块级内容，然而后续段落必须以 空白行开头并且缩进以列表标记之后的第一个非空格内容对齐 * First paragraph. Continued. * Second paragraph. With a code block, which must be indented eight spaces: { code } Exceptin 如果列表标记后跟随缩进代码块，必须在列表标记后添加 五个空格 ，后续段落必须在列表标记的最后一个字符后 两个空格缩进 * code continuation paragraph 列表包含其他列表，前置空白行可以省略，内嵌的列表缩进必须与前一个列表标记后的第一个非空字符对齐。 * fruits + apples - macintosh - red delicious + pears + peaches * vegetables + broccoli + chard 懒式（lazily）列表可以省略行前缩进，但如果列表项存在多个段落或其他块，\b 每段的第一行需要缩进 + A lazy, lazy, list item. + Another one; this looks bad but is legal. Second paragraph of second list item. 7.3 Ordered lists 有序列表 标准 Markdown 语法，序号是十进制数字后加 . 和空格 ，序号数字会被忽略。 1. one 2. two 3. three 5. one 7. two 1. three Extension fancy_lists Pandoc 允许有序列表使用大小写字母、罗马数字、阿拉伯数字标注，列表标记可能被括号包围、单独一个右括号或者句号，他们必须与列表内容间隔一个空格，如果列表标记是大写字母后接句号则\b间隔至少两个空格。 # 同样可以作为符号标记 #. one #. two Extension startnum Pandoc 同样支持自定义起始数字，以下列表数字后接右括号，从9开始，并且子列表为小写罗马数字。 9) Ninth 10) Tenth 11) Eleventh i. subone ii. subtwo iii. subthree Pandoc 将不同类型的列表标记重新开始列表，以下是建立三个列表 (2) Two (5) Three 1. Four * Five 7.4 Definition lists 列表定义 Extension definition_lists Pandoc 支持定义列表，使用 PHP Markdown Extra Term 1 : Definition 1 Term 2 with *inline markup* : Definition 2 { some code, part of Definition 2 } Third paragraph of definition 2. 每行定义一个术语，后面可存在空白行，但必须存在一个或多个定义，定义始于冒号或波浪号，可能会存在缩进一两个空格。 TODO 7.5 Numbered example lists 编号示例列表 Extension example_lists 特殊列表标记符 @ ，列表会依次编号横跨整个文档，后续的新列表使用 @ 标记符，会续接之前的编号 (@) My first example will be numbered (1). (@) My second example will be numbered (2). Explanation of examples. (@) My third example will be numbered (3). 编号的示例可以打标签并且在文档中引用 (@good) This is a good example. As (@good) illustrates, ... 标签可以使用任何字母数字下划线和连字符 Note 连续段落在示例列表中 必须缩进四个空格 7.6 Compact and loose lists 紧凑／稀疏列表 Pandoc 与 Markdown.pl 在\"边缘情况\"(edge cases)表现不同 + First + Second: - Fee - Fie - Foe + Third Pandoc 解释为紧凑列表（ <p> 不包围 First , Second , Third 而 Markdown 不包围 First ）因为 Third 的空格。Pandoc 遵循简单的规则：如果文本后跟随空格视为段落， Second 后没有空行后接列表视为非段落。事实上列表后接空白行是无关的。 7.7 Ending a list 结束列表 - item one - item two { my code block } Pandoc 将代码块视为第二个列表项的第二段而不是代码块 为了\"切断\"列表，可以插入不缩进的内容，如HTML注释 - item one - item two <!-- end of list --> { my code block } 你可以使用同样的方法获得两个连续的列表而不是一个 1. one 2. two 3. three <!-- --> 1. uno 2. dos 3. tres 8 Horzontal rules 水平分隔线 一行包含三个以上 * , - , _ 字符，字符间可插入空格，视为水平分割线 * * * * --------------- 9 Tables 表格 四种列表样式，前三种要求等宽（fixed-width）字体,最后一种可以使用等比例（proportionally spaced）字体 Extension table_captions 选择为所有4种表格提供题注。题注是以字符串Table:(或只是:)开头的段落，它将被剥离,它可能出现在表格之前或之后。 Extension simple_tables Right Left Center Default ------- ------ ---------- ------- 12 12 12 12 123 123 123 123 1 1 1 1 Table: Demonstration of simple table syntax. 表头和表行必须各自填充一行。列对齐由表头文本相对于其下方虚线的位置确定 如果虚线与右侧的表头文本齐平但在左侧超出表头，则该列右对齐 如果虚线与左侧的表头文本齐平但在右侧超出表头，则该列左对齐 如果虚线超出两侧的表头文本，则该列居中对齐。 如果虚线与两侧的表头文本齐平，则使用默认对齐方式（大多数情况是左对齐） 表格必须以空白行结束或空白行后接虚线行 如果使用虚线来结束表格，则可以省略列表头 ------- ------ ---------- ------- 12 12 12 12 123 123 123 123 1 1 1 1 ------- ------ ---------- ------- 省略标题时，根据表格主体的第一行内容确定列对齐。在上表中，列将分别为右，左，中和右对齐。 Extension multiline_tables 多行表格允许表头和表行跨越多行文本（但不支持跨越表的多个列或行的单元格） ------------------------------------------------------------- Centered Default Right Left Header Aligned Aligned Aligned ----------- ------- --------------- ------------------------- First row 12.0 Example of a row that spans multiple lines. Second row 5.0 Here's another one. Note the blank line between rows. ------------------------------------------------------------- Table: Here's the caption. It, too, may span multiple lines. 同简单列表类似，但存在以下不同 它们必须以表头文本之前的一行虚线开头（除非省略表头） 它们必须以一行虚线结束，然后是空白行 行之间必须用空行分隔 多行表可能只有一行，但该行后面应该有一个空行（然后是结束表的虚线行） Extension grid_tables : Sample grid table. +---------------+---------------+--------------------+ | Fruit | Price | Advantages | +===============+===============+====================+ | Bananas | $1.34 | - built-in wrapper | | | | - bright color | +---------------+---------------+--------------------+ | Oranges | $2.10 | - cures scurvy | | | | - tasty | +---------------+---------------+--------------------+ = 行将表头与表体分开，对于无表头可以省略。网格表的单元格可以包含任意块元素（多个段落，代码块，列表等）,不支持跨多个列或行的单元格。 通过将冒号放在表头后面的分隔线边界处，类似与 pipe tables +---------------+---------------+--------------------+ | Right | Left | Centered | +==============:+:==============+:==================:+ | Bananas | $1.34 | built-in wrapper | +---------------+---------------+--------------------+ 对于无表头，冒号位于顶行 +--------------:+:--------------+:------------------:+ | Right | Left | Centered | +---------------+---------------+--------------------+ Note Pandoc不支持具有行跨度或列跨度的网格表。这意味着Pandoc既不支持跨行的可变列数，也不支持跨列的可变行数。所有网格表在每行中必须具有相同的列数，并且每列中的行数必须相同 Extension pipe_tables | Right | Left | Default | Center | |------:|:-----|---------|:------:| | 12 | 12 | 12 | 12 | | 123 | 123 | 123 | 123 | | 1 | 1 | 1 | 1 | : Demonstration of pipe table syntax. 前后垂直符可省略，表头不能省略。 要模拟无表头表，请包含带有空白单元格的表头。由于垂直线指示列边界，因此列不需要垂直对齐 fruit| price -----|-----: apple|2.05 pear|1.37 orange|3.09 表的单元格不能包含段落和列表等块元素，也不能跨越多行。如果表包含可打印内容宽于列宽的行，则表将占用全文宽度，单元格内容将换行，相对单元格宽度由在表格表头与表格主体分隔的行中虚线数量确定。另一方面，如果没有行宽于列宽，则单元格内容将不会包裹，单元格将根据其内容确定大小 10 Metadata blocks 元数据块 Extension pandoc_title_block % title % author(s) (separated by semicolons) % date 解析为书目信息，而不是常规文本,如果需要不同的信息，使用空白行分离 % % Author % My title % % June 15, 2006 标题可能占用多行，但延续行必须以空格开头 % My title on multiple lines 如果文档有多个作者，则作者可能被放在具有开头空格的单独行中，或者用分号或两者分隔 % Author One Author Two % Author One; Author Two % Author One; Author Two 日期必须单独一行 所有三个元数据字段都可能包含标准内联格式（inline format）（斜体，链接，脚注等） Extension yaml_metadata_block 顶部的三个连字符 --- 和底部的三个连字符 --- 或三个点 ... 的行分隔。 YAML 元数据块可能出现在文档中的任何位置，但如果它不在文档开头，则必须以前方存在空白行 元数据可以包含列表和 YAML 对象，Pandoc 将忽略名称以下划线结尾的字段，如果两个元数据块尝试设置相同的字段，则将采用第一个块中的值。 必须遵循 YAML 转义规则,标题包含冒号，则必须引用它。垂直符 | 在缩进行的行首，该行将按字面解释，无需转义。当文本中包含空行或块级样式时，必须遵守以上规则 --- title: 'This is the title: it contains a colon' author: - Author One - Author Two tags: [nothing, nothingness] abstract: | This is the abstract. It consists of two paragraphs. ... TODO Template variables 11 Backslash escapes 反斜杠转义 Extension all_symbols_escapable 除了代码块或内联代码之外，任何以反斜杠开头的标点符号或空格字符都将按字面处理，即使它表示格式。 *\\*hello\\** one will get <em>*hello*</em> instead of <strong>hello</strong> 转义字符 \\`*_{}[]()>#+-.! ，反斜杠转义空格被解析为不间断空格 反斜杠转义的换行符（即在行尾发生的反斜杠）被解析为硬换行。这是Markdown的\"隐形\"换行方式，和行后尾随两个空格作用相同 Note 反斜杠转义在代码块种不起作用 12 Inline formatting 内联样式 12.1 Emphasis 强调 单个 * 或 _ 包围文本表示斜体 This text is _emphasized with underscores_, and this is *emphasized with asterisks*. 两个 * 或 _ 包围文本表示加重／加粗 This is **strong emphasis** and __with underscores__. * 或 _ 包围\b文本中 存在空格或反斜杠转义 不会产生斜体效果 This is * not emphasized *, and \\*neither is this\\*. Extension intraword_underscores 因为 _ 有时在单词和标识符中使用，所以Pandoc不会将由字母、数字包围的名称 _ 处理为斜体，使用 * 代替 feas*ible*, not feas*able*. 12.2 Strikeout 删除线 Extension strikeout 用 ~~ 开始和结束 This ~~is deleted text.~~ 12.3 Superscripts and subscripts 上下标 Extension superscript subscript 通过 &#94; 字符包围上标文本来表示上标; 可以通过 〜 字符围绕下标文本来表示下标 H~2~O is a liquid. 2&#94;10&#94; is 1024. 如果上标或下标文本包含空格，则必须使用反斜杠转义这些空格 12.4 Verbatim 文本放在反引号 ` 中，默认保留所有格式 What is the difference between `>>=` and `>>` ? 如果文本中包含反引号 ` ,使用 `` 代替，包围的前后空格会被忽略 Here is a literal backtick ` ` ` `` Note 反斜杠转义在文本上下文不起作用 Extension inline_code_attributes 类似于围栏代码块 `<$>` {.haskell} 13 Math 数学公式 Extension tex_math_dollars 两个 $ 字符之间的任何内容都将被视为TeX数学公式。开头 $ 必须在其右边有一个非空格字符，而结束 $ 必须在其左边有一个非空格字符，并且不能立即跟随一个数字。 如果由于某种原因你需要包含文本 $ 字符中，则反斜杠 \\ 转义它们. 14 Raw HTML Extension raw_html Markdown允许您在文档中的任何位置插入原始HTML（其中<，>和＆按字面解释） Extension markdown_in_html_blocks Extension native_divs Extension native_spans Extension raw_tex LaTeX 文本 \\begin{tabular}{|l|l|}\\hline Age & Frequency \\\\ \\hline 18--25 & 15 \\\\ 26--35 & 33 \\\\ 36--45 & 22 \\\\ \\hline \\end{tabular} 15 Generic raw attribute Extension raw_attribute 具有特殊属性的内联 spans 和围栏代码块将被解析为具有指定格式的内容 ? \\```{=ms} .MYMACRO blah blah \\``` 16 LaTeX macros Extension line_blocks TODO 17 Links 链接 17.1 Automatic links 自动链接 将 URL 或 email 放在尖括号中 <http://google.com> <sam@green.eggs.ham> 17.2 Inline links 内联链接 内联链接由方括号中的链接文本组成，后跟圆括号的URL。（URL后面可以跟引号中的链接标题。） This is an [inline link](/url) , and here's [one with a title](http://fsf.org \"click here for a good time!\"). 方括号部分和圆括号部分之间不能有空格 链接文本可以包含格式，但标题 tilte 不能。 内联链接中的电子邮件地址不会被自动检测，因此必须以 mailto 为前缀 [Write me!](mailto:sam@green.eggs.ham) 17.3 Reference links 参考链接 显式参考链接有两个部分，链接本身和链接定义 链接由方括号的链接文本，后跟方括号中的标签组成。 链接定义包括方括号标签，后跟 冒号和空格 ，后跟URL，以及可省略的引号或括号中的链接标签。 引用优先于链接标签 [my label 1]: /foo/bar.html \"My title, optional\" [my label 2]: /foo [my label 3]: http://fsf.org (The free software foundation) [my label 4]: /bar#special 'A title in single quotes' [my label 5]: <http://foo.bar.baz> [my label 6]: http://fsf.org \"The free software foundation\" 链接标签大小写不敏感 Here is [my link][FOO] [Foo]: /bar/baz 隐式参考链接的第二个方括号内容可以省略 See [my website][] . [my website]: http://foo.bar.baz Note 大多数 Markdown \b实现不能将参考链接嵌入列表项和块引用中，Pandoc解除了这个限制。 > My block [quote]. > > [quote]: /foo Extension shortcut_reference_links 短参考引用可以省略第二个方括号 See [my website]. [my website]: http://foo.bar.baz 17.4 Internal links 内部链接 内部链接支持链接到自动生成的标题识别符 See the [Introduction](#introduction) . See the [Introduction]. [Introduction]: #introduction 18 Images 图片 一个链接紧接着一个 ! 将被视为插入图像，链接文本将用图像替代文字 ![la lune](lalune.jpg \"Voyage to the moon\") ![movie reel] [movie reel]: movie.gif Extension implicit_figures 图像存在非空的文字出现在段落中，将渲染成图像题注 ![This is the caption](/url/of/image.png) Extension link_attributes 图片链接可以设置属性样式 An inline ![image](foo.jpg) {#id .class width=30 height=20px} and a reference ![image][ref] with attributes. [ref]: foo.jpg \"optional title\" {#id .class key=val key2=\"val 2\"} 19 Divs and Spans Extension fenced_divs Pandoc 支持围栏 div 语法\b,连续三个冒号，后面可跟随属性样式 ::::: {#special .sidebar} Here is a paragraph. And another. ::::: 围栏 div 可以嵌套使用 ::: Warning :::::: This is a warning. ::: Danger This is a warning within a warning. ::: :::::::::::::::::: Extension bracketed_spans 行内方括号包围文字可以解释为链接，如果后面跟随属性样式将会解析为 Span 标签 [This is *some text*]{.class key=\"val\"} 20 Footnotes 脚注 Extension footnotes Here is a footnote reference, [&#94;1] and another. [&#94;longnote] [&#94;1] : Here is the footnote. [&#94;longnote] : Here's one with multiple blocks. Subsequent paragraphs are indented to show that they belong to the previous footnote. { some.code } The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. This paragraph won't be part of the note, because it isn't indented. 脚注标志符可能不包含空格、tab、回车，输出时脚注会被依次编号。脚注不需要放在文档末位处，每个脚注需要使用空白行与其他内容分离 Extension inline_notes 行内脚注不能包含多段落内容 Here is an inline note.&#94;[Inlines notes are easier to write, since you don't have to pick an identifier and move down to type the note.] 21 Citations 引用 Extension citations Pandoc 使用以下命令可以自动生成引用和参考目录 pandoc --filter pandoc-citeproc myinput.txt TODO 22 Non-pandoc extensions 以下拓展可以默认未开启，如需使用需要在 +EXTENSION 后输入拓展名 Extension old_dashes 智能解析 - 和 -- 符号，pandoc <= 1.8.2.1, textile 输出默认选中 Extension angle_brackets_escapable 允许 < 和 > 作为转义字符 Extension lists_without_preceding_blankline 允许列表在段落后出现，没有中间空格 Extension four_space_rule 列表项后续段落需要四个空格缩进 Extension spaced_reference_links 允许参考链接的两个括号之间存在空格 Extension hard_line_breaks 段落中的所有换行符被解释为硬换行符而不是空格 Extension ignore_line_breaks 导致段落中的换行符被忽略，而不是被视为空格或硬换行符。 此选项适用于东亚语言，其中单词之间不使用空格，但文本被分为行以便于阅读。 Extension east_asian_line_breaks 同上，对于包含东亚宽字符和其他字符混合的文本，这是一个比 ignore_line_breaks 更好的选择。 Extension emoji Pandoc 解析 :smile: 为 Emoji\b 表情 Extension tex_math_single_backslash \\( \\) 和 \\[ \\] 解析为数学公式，但是会忽略转义的 \\( 和 \\[ Extension tex_math_double_backslash \\\\( \\\\) 和 \\\\[ \\\\] 解析为数学公式 Extension markdown_attribute 默认\b \bMarkdown 解析块级属性为文本内容,此拓展只解析 具有 markdown=1 标签的块属性 Extension mmd_title_block 支持 MultiMarkdown 风格的标题块,如果 pandoc_title_block 和 yaml_metadata_block 选项开启会优先于此拓展 Title: My title Author: John Doe Date: September 1, 2008 Comment: This is a sample mmd title block, with a field spanning multiple lines. Extension abbreviations 解析 PHP Markdown Extra 缩写键值,Pandoc不支持缩写，缩写键值简单跳过 * [HTML]: Hypertext Markup Language Extension autolink_bare_uris 所有绝对路径成为链接，即使没有尖括号 <...> 包围 Extension mmd_link_attributes This is a reference ![image][ref] with multimarkdown attributes. [ref]: http://path.to/image \"Image title\" width=20px height=30px id=myId class=\"myClass1 myClass2\" Extension mmd_header_identifiers Extension compact_definition_lists 兼容性定义列表，pandoc <= 1.2* 23 Markdown variants Markdwon 变种 23.1 markdown_phpextra(PHP Markdown Extra) footnotes, pipe_tables, raw_html, markdown_attribute, fenced_code_blocks, definition_lists, intraword_underscores, header_attributes, link_attributes, abbreviations, shortcut_reference_links, spaced_reference_links. 23.2 markdown_mmd(MultiMarkdown) pipe_tables, raw_html, markdown_attribute, mmd_link_attributes, tex_math_double_backslash, intraword_underscores, mmd_title_block, footnotes, definition_lists, all_symbols_escapable, implicit_header_references, auto_identifiers, mmd_header_identifiers, shortcut_reference_links, implicit_figures, superscript, subscript, backtick_code_blocks, spaced_reference_links, raw_attribute. 23.3 markdown_strict(Markdown.pl) raw_html, shortcut_reference_links, spaced_reference_links. 23.4 gfm(GitHub-Flavored Markdown) pipe_tables, raw_html, fenced_code_blocks, auto_identifiers, ascii_identifiers, backtick_code_blocks, autolink_bare_uris, intraword_underscores, strikeout, hard_line_breaks, emoji, shortcut_reference_links, angle_brackets_escapable. 24 引用 Pandoc","tags":"Tech","url":"https://cnewbie.github.io/blog/2018/pandoc-markdown/"},{"title":"Git Cheatsheet","text":"Git Cheatsheet code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; position: absolute; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; } pre.numberSource a.sourceLine:empty { position: absolute; } pre.numberSource a.sourceLine::before { content: attr(data-line-number); position: absolute; left: -5em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; font-weight: bold; } /* Alert */ code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */ code span.at { color: #7d9029; } /* Attribute */ code span.bn { color: #40a070; } /* BaseN */ code span.bu { } /* BuiltIn */ code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */ code span.ch { color: #4070a0; } /* Char */ code span.cn { color: #880000; } /* Constant */ code span.co { color: #60a0b0; font-style: italic; } /* Comment */ code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */ code span.do { color: #ba2121; font-style: italic; } /* Documentation */ code span.dt { color: #902000; } /* DataType */ code span.dv { color: #40a070; } /* DecVal */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.fl { color: #40a070; } /* Float */ code span.fu { color: #06287e; } /* Function */ code span.im { } /* Import */ code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */ code span.kw { color: #007020; font-weight: bold; } /* Keyword */ code span.op { color: #666666; } /* Operator */ code span.ot { color: #007020; } /* Other */ code span.pp { color: #bc7a00; } /* Preprocessor */ code span.sc { color: #4070a0; } /* SpecialChar */ code span.ss { color: #bb6688; } /* SpecialString */ code span.st { color: #4070a0; } /* String */ code span.va { color: #19177c; } /* Variable */ code span.vs { color: #4070a0; } /* VerbatimString */ code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */ Git Cheatsheet 1 Git 基础 1.1 基础操作 1.2 远程仓库 1.3 标签 2 Git 分支 2.1 分支基本操作 2.2 远程分支 3 Git 工具 3.1 储藏与清理 3.2 重写历史 3.3 重置对比 3.4 子模块 1 Git 基础 1.1 基础操作 初始化仓库 git init git clone [url] 检查文件状态 git status 跟踪文件 git add [file name] 跟踪新文件/暂存已修改文件 对比文件修改内容 git diff [file name] git diff --cached/staged [file name] 对比暂存区文件 提交更新 git commit git commit -m [message] 更新纪录 git commit -a -m [message] 跳过暂存文件步骤直接提交 移除文件 git rm [file name] 删除文件并取消跟踪 git rm --cached [file name] 取消跟踪文件 重命名文件 git mv [file name] mv old_name new_name git rm old_name git add new_name 查看提交历史 git log git log git log --pretty=format: \"%h %s\" --graph 撤销提交 git commmit --amend git rebase -i 撤销暂存文件 git reset HEAD [file name] git reset --hard [file name] 当前文件修改丢失 撤销文件修改 git checkout -- [file name] 1.2 远程仓库 查看远程仓库 git remote -v 添加远程仓库 git remote add [short name] [url] 从远程仓库获取文件 git fetch [remote name] 推送到远程分支 git push [remote name] [branch name] 查看远程仓库 git remote show [remote-name] 远程仓库重命名 git remote rename [old name] [new name] 删除远程仓库 git rm [remote name] 1.3 标签 查看标签 git tag 添加附注标签 git tag -a [tag name] -m [message] 查看标签详情 git show [tag name] 添加轻量标签 git tag [tag name] 推送标签至远程服务器 git push [remote branch name] [tag name] 推送所有标签 git push [remote branch name] --tags 特定标签上建立分支 git checkout -b [branch name] [tag name] 2 Git 分支 2.1 分支基本操作 分支创建 git branch [branch name] 分支切换 git checkout [branch name] 查看分支历史 git log --oneline --decorate --graph --all 合并分支 git merge [branch name] 删除分支 git branch -d [branch name] 2.2 远程分支 查看远程分支 git ls-remote or git remote show [remote name] 推送分支 git push [remote] [local branch] == git push [remote] [local branch:remote branch name] 跟踪分支 git chenckout -b [branch] [remote name]/[branch] 设置上游分支 git branch -u [remote name]/[branch] 查看跟踪分支 git branch -vv 抓取分支更新 git fetch --all 删除远程分支 git push [remote] --delete [branch name] or git push [remote] :[branch naem] example 分支合并 git rebase/merge rebase 历史纪录更简洁 变基 3 Git 工具 引用日志 查看分支引用的历史纪录 git reflog 提交区间 双点语法,查看后者引用中特定的提交 git log [ref name1]..[ref name2] 多点语法,不包含最后引用的提交 git log refA refB &#94;refC == git log refA refB --not refC 三点语法,查看两引用的差异提交 git log [ref name1]...[ref name2] 3.1 储藏与清理 储藏工作空间 git stash save 查看储藏列表 git stash list 应用储藏 git stash apply [ref] 删除储藏 git stash drop [ref] 不储藏暂存区文件 git stash save --kep-index 应用储藏包括暂存区 git stash apply --index 储藏包含未跟踪的文件 git stash -u/--include-untracked 新建分支并应用储藏 git stash branch [nranch name] 移除为跟踪文件 git clean 移除所用文件并储藏 git stash --all 3.2 重写历史 修改最后一次提交 git commit --amend 交互式修改ref开始的所有提交 git rebase -i [ref] 批量修改提交 git filter-branch --tree-filter [command] [ref] 切换根目录 git filter-branch --subdirectory-filter [directory name] [ref] 3.3 重置对比 相反操作操作提交指针 git reset --soft HEAD~ | git commit 相反操作暂存区 git reset [file name] | git add [file name] 撤销所有修改包括工作区 git reset --hard HEAD~ 恢复暂存区文件版本其他不变 精简历史 git reset [ref] -- [file name] 切换HEAD指针不丢弃工作目录修改 git checkout [branch name] 丢弃文件修改 reset,checkout,revert git checkout -- [file name] 3.4 子模块 添加子模块 git submodule add [url] 抓取后初始化模块 git submodule init 抓取后更新子模块 git submodule update --remote 查看子模块日志 git log -p --submodule 更新合并 git submodule update --remote --merge/--rebase 检查子模块是否推送 git push --recurse-submodules=check 批量操作子模块 git submodule foreach [command]","tags":"Tech","url":"https://cnewbie.github.io/blog/2018/git-cheatsheet/"},{"title":"Iptables Firewall","text":"Iptables 防火墙配置 code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; position: absolute; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; } pre.numberSource a.sourceLine:empty { position: absolute; } pre.numberSource a.sourceLine::before { content: attr(data-line-number); position: absolute; left: -5em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; font-weight: bold; } /* Alert */ code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */ code span.at { color: #7d9029; } /* Attribute */ code span.bn { color: #40a070; } /* BaseN */ code span.bu { } /* BuiltIn */ code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */ code span.ch { color: #4070a0; } /* Char */ code span.cn { color: #880000; } /* Constant */ code span.co { color: #60a0b0; font-style: italic; } /* Comment */ code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */ code span.do { color: #ba2121; font-style: italic; } /* Documentation */ code span.dt { color: #902000; } /* DataType */ code span.dv { color: #40a070; } /* DecVal */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.fl { color: #40a070; } /* Float */ code span.fu { color: #06287e; } /* Function */ code span.im { } /* Import */ code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */ code span.kw { color: #007020; font-weight: bold; } /* Keyword */ code span.op { color: #666666; } /* Operator */ code span.ot { color: #007020; } /* Other */ code span.pp { color: #bc7a00; } /* Preprocessor */ code span.sc { color: #4070a0; } /* SpecialChar */ code span.ss { color: #bb6688; } /* SpecialString */ code span.st { color: #4070a0; } /* String */ code span.va { color: #19177c; } /* Variable */ code span.vs { color: #4070a0; } /* VerbatimString */ code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */ Iptables 防火墙配置 1 filter,nat,mangle 规则表 1.1 filter表 1.2 nat表 1.3 mangle表 1.4 raw表 2 规则链和规则 3 iptables编写规则 4 iptables常用实例备查 5 引用 1 filter,nat,mangle 规则表 1.1 filter表 数据包过滤,根据规则决定是否放行数据包（DROP,ACCEPT,REJECT,LOG） 三条规则链 INPUT 进入本地的包 FORWARD 不是本地产生且负责转发的包 OUTPUT 本地产生的包 1.2 nat表 修改数据包ip地址、端口等信息（SNAT,DNAT,MASQUERADE,REDIRECT） 三条规则链 PREROUTING 改变进入数据包的目的地址 OUTPUT 改变本地产生包的目的地址 POSTROUTING 改变发出数据包的源地址 1.3 mangle表 修改数据包的TOS，TTL及数据包的Mark 五个规则链 PREROUTING，POSTROUTING，INPUT，OUTPUT，FORWARD 1.4 raw表 决定数据包是否被状态跟踪机制处理 两条规则链 OUTPUT,PREROUTING 四种状态 NEW 开始一个连接 RELATED 某个已经建立的连接所建立的新连接 ESTABLISHED 发送后接到应答的数据包 INVALID 无法识别的数据包 2 规则链和规则 在处理各种数据包时，根据防火墙规则的不同时机，iptables供涉及5种默认规则链： INPUT 当接收到防火墙本机地址的数据包（入站）时,应用此链中的规则。。 OUTPUT 当防火墙本机向外发送数据包（出站）时，应用此链中的规则。 FORWARD 当接收到需要通过防火墙发送给其他地址的数据包（转发）时，应用此链中的规则。 PREROUTING 在对数据包作路由选择之前，应用此链中的规则，如DNAT。 POSTROUTING 在对数据包作路由选择之后，应用此链中的规则，如SNAT。 -->PREROUTING-->[ROUTE]-->FORWARD-->POSTROUTING--> mangle | mangle &#94; mangle nat | filter | nat | | | | v | INPUT OUTPUT | mangle &#94; mangle | filter | nat v ------>local------->| filter 防火墙处理数据包的方式（规则）： ACCEPT：允许数据包通过 DROP：直接丢弃数据包，不给任何回应信息 REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息。 SNAT：源地址转换。在进入路由层面的route之前，重新改写源地址，目标地址不变，并在本机建立NAT表项，当数据返回时，根据NAT表将目的地址数据改写为数据发送出去时候的源地址，并发送给主机。解决内网用户用同一个公网地址上网的问题。 MASQUERADE，是SNAT的一种特殊形式，适用于像adsl这种临时会变的ip上 DNAT:目标地址转换。和SNAT相反，IP包经过route之后、出本地的网络栈之前，重新修改目标地址，源地址不变，在本机建立NAT表项，当数据返回时，根据NAT表将源地址修改为数据发送过来时的目标地址，并发给远程主机。可以隐藏后端服务器的真实地址。 REDIRECT：是DNAT的一种特殊形式，将网络包转发到本地host上（不管IP头部指定的目标地址是啥），方便在本机做端口转发。 LOG：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则 除去最后一个LOG，前3条规则匹配数据包后，该数据包不会再往下继续匹配了，所以编写的规则顺序极其关键。 Linux数据包路由原理 数据包流程 3 iptables编写规则 命令格式 [-t 表名]：该规则所操作的哪个表，可以使用filter、nat等，如果没有指定则默认为filter -A：新增一条规则，到该规则链列表的最后一行 -I：插入一条规则，原本该位置上的规则会往后顺序移动，没有指定编号则为1 -D：从规则链中删除一条规则，要么输入完整的规则，或者指定规则编号加以删除 -R：替换某条规则，规则替换不会改变顺序，而且必须指定编号。 -P：设置某条规则链的默认动作 -nL：-L、-n，查看当前运行的防火墙规则列表 chain名：指定规则表的哪个链，如INPUT、OUPUT、FORWARD、PREROUTING等 [规则编号]：插入、删除、替换规则时用，–line-numbers显示号码 [-i|o 网卡名称]：i是指定数据包从哪块网卡进入，o是指定数据包从哪块网卡输出 [-p 协议类型]：可以指定规则应用的协议，包含tcp、udp和icmp等 [-s 源IP地址]：源主机的IP地址或子网地址 [–sport 源端口号]：数据包的IP的源端口号 [-d目标IP地址]：目标主机的IP地址或子网地址 [–dport目标端口号]：数据包的IP的目标端口号 -m：extend matches，这个选项用于提供更多的匹配参数，如： -m state –state ESTABLISHED,RELATED -m tcp –dport 22 -m multiport –dports 80,8080 -m icmp –icmp-type 8 <-j 动作>：处理数据包的动作，包括ACCEPT、DROP、REJECT等 4 iptables常用实例备查 iptables -P INPUT DROP iptables -P FORWARD ACCEPT iptables -P OUTPUT ACCEPT 限制 iptables -I INPUT 1 -m state --state RELATED,ESTABLISHED -j ACCEPT 把这条语句插在input链的最前面（第一条），对状态为ESTABLISHED,RELATED的连接放行 iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT 开放指定端口 iptables -I INPUT 2 -i lo -j ACCEPT 允许loopback，本地回环是主机内部发送和接收 删除 iptables -D chain number 丢弃非法连接 iptables -A INPUT -m state –state INVALID -j DROP iptables -A OUTPUT -m state –state INVALID -j DROP iptables-A FORWARD -m state –state INVALID -j DROP 日志 iptables -R INPUT 1 -p tcp --dport 22 -m limit --limit 3/minute --limit-burst 8 -j LOG Dos iptables -N syn-flood (如果您的防火墙默认配置有\" :syn-flood - [0:0] \"则不许要该项，因为重复了) iptables -A INPUT -p tcp --syn -j syn-flood iptables -I syn-flood -p tcp -m limit --limit 2/s --limit-burst 5 -j RETURN iptables -A syn-flood -j REJECT # 防止DOS太多连接进来,可以允许外网网卡每个IP最多15个初始连接,超过的丢弃 # 需要iptables v1.4.19以上版本：iptables -V iptables -A INPUT -p tcp --syn -i eth0 --dport 80 -m connlimit --connlimit-above 20 --connlimit-mask 24 -j DROP #用Iptables抵御DDOS (参数与上相同) iptables -A INPUT -p tcp --syn -m limit --limit 5/s --limit-burst 10 -j ACCEPT iptables -A FORWARD -p tcp --syn -m limit --limit 1/s -j ACCEPT iptables -A FORWARD -p icmp -m limit --limit 2/s --limit-burst 10 -j ACCEPT iptables -A INPUT -p icmp --icmp-type 0 -s ! 172.29.73.0/24 -j DROP 5 引用 Seanlook","tags":"Tech","url":"https://cnewbie.github.io/blog/2017/iptables-firewall/"},{"title":"Introduction of Genetic Algorithm","text":"Introduction of Genetic Algorithm code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Introduction of Genetic Algorithm 1 Outline of GA 2 Selection 3 Encoding 4 Crossover and Mutation 4.1 Binary Encoding 4.2 Value Encoding 4.3 Tree Encoding 5 References 1 Outline of GA Outline of the Basic Genetic Algorithm [Start] Generate random population of n chromosomes (suitable solutions for the problem) [Fitness] Evaluate the fitness f(x) of each chromosome x in the population [New population] Create a new population by repeating following steps until the new population is complete Selection Select two parent chromosomes from a population according to their fitness (the better fitness, the bigger chance to be selected) [Crossover] With a crossover probability cross over the parents to form a new offspring (children). If no crossover was performed, offspring is an exact copy of parents. [Mutation] With a mutation probability mutate new offspring at each locus (position in chromosome). [Accepting] Place new offspring in a new population [Replace] Use new generated population for a further run of algorithm [Test] If the end condition is satisfied, stop, and return the best solution in current population [Loop] Go to step 2 2 Selection Roulette Wheel Selection This method have problems when the fitnesses differs very much. Rank Selection This method can lead to slower convergence, because the best chromosomes do not differ so much from other ones. Steady-state Selection Main idea of this selection is that big part of chromosomes should survive to next generation. Elitism Elitism is name of method, which first copies the best chromosome (or a few best chromosomes) to new population. The rest is done in classical way. Elitism can very rapidly increase performance of GA, because it prevents losing the best found solution. 3 Encoding Binary Encoding Binary encoding is the most common, mainly because first works about GA used this type of encoding. Permutation Encoding Permutation encoding can be used in ordering problems, such as traveling salesman problem or task ordering problem. Permutation encoding is only useful for ordering problems. Even for this problems for some types of crossover and mutation corrections must be made to leave the chromosome consistent (i.e. have real sequence in it). Value Encoding Direct value encoding can be used in problems, where some complicated value, such as real numbers, are used. Use of binary encoding for this type of problems would be very difficult. Tree Encoding Tree encoding is used mainly for evolving programs or expressions, for genetic programming. Tree encoding is good for evolving programs. Programing language LISP is often used to this, because programs in it are represented in this form and can be easily parsed as a tree, so the crossover and mutation can be done relatively easily. 4 Crossover and Mutation 4.1 Binary Encoding Crossover Single point crossover - one crossover point is selected, binary string from beginning of chromosome to the crossover point is copied from one parent, the rest is copied from the second parent Two point crossover - two crossover point are selected, binary string from beginning of chromosome to the first crossover point is copied from one parent, the part from the first to the second crossover point is copied from the second parent and the rest is copied from the first parent Uniform crossover - bits are randomly copied from the first or from the second parent Arithmetic crossover - some arithmetic operation is performed to make a new offspring Mutation Bit inversion - selected bits are inverted ###Permutation Encoding Crossover Single point crossover - one crossover point is selected, till this point the permutation is copied from the first parent, then the second parent is scanned and if the number is not yet in the offspring it is added Mutation Order changing - two numbers are selected and exchanged 4.2 Value Encoding Crossover All crossovers from binary encoding can be used Mutation Adding a small number (for real value encoding) - to selected values is added (or subtracted) a small number 4.3 Tree Encoding Crossover Tree crossover - in both parent one crossover point is selected, parents are divided in that point and exchange part below crossover point to produce new offspring Mutation Changing operator, number - selected nodes are changed 5 References Traveling Salesman Problem Genetic Algorithm","tags":"Tech","url":"https://cnewbie.github.io/blog/2017/introduction-of-genetic-algorithm-en/"},{"title":"Git Pro","text":"Git Pro Doc code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; position: absolute; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; } pre.numberSource a.sourceLine:empty { position: absolute; } pre.numberSource a.sourceLine::before { content: attr(data-line-number); position: absolute; left: -5em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; font-weight: bold; } /* Alert */ code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */ code span.at { color: #7d9029; } /* Attribute */ code span.bn { color: #40a070; } /* BaseN */ code span.bu { } /* BuiltIn */ code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */ code span.ch { color: #4070a0; } /* Char */ code span.cn { color: #880000; } /* Constant */ code span.co { color: #60a0b0; font-style: italic; } /* Comment */ code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */ code span.do { color: #ba2121; font-style: italic; } /* Documentation */ code span.dt { color: #902000; } /* DataType */ code span.dv { color: #40a070; } /* DecVal */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.fl { color: #40a070; } /* Float */ code span.fu { color: #06287e; } /* Function */ code span.im { } /* Import */ code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */ code span.kw { color: #007020; font-weight: bold; } /* Keyword */ code span.op { color: #666666; } /* Operator */ code span.ot { color: #007020; } /* Other */ code span.pp { color: #bc7a00; } /* Preprocessor */ code span.sc { color: #4070a0; } /* SpecialChar */ code span.ss { color: #bb6688; } /* SpecialString */ code span.st { color: #4070a0; } /* String */ code span.va { color: #19177c; } /* Variable */ code span.vs { color: #4070a0; } /* VerbatimString */ code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */ Git Pro Doc 1 Git Basics 1.1 Recording Changes to the Repository 1.2 Viewing the Commit History 1.3 Undoing Things 1.4 Working with Remotes 1.5 Tagging 1.6 Git Aliases 2 Git Branching 2.1 Basic Branching and Merging 2.2 Branch Management 2.3 Branching Workflows 2.4 Remote Branches 2.5 Rebasing 3 Distributed Git 3.1 Distributed Workflows 4 Git Tools 4.1 Revision Selection 4.2 Commit Ranges 5 Reference 1 Git Basics This chapter covers every basic command. ## Getting a Git Repository Initialzing a Repository in an existing directory git init Cloning an existing repository git clone [url] 1.1 Recording Changes to the Repository Checking the Status of Yours Files git status Tracking New Files git add [filename] Staging Modified Files git add [filename] Short Status git status -s Ignoring files .gitignore file save file patterns to match them. The rules for the patterns you can put in the .gitignore file are as follows: - Blank lines or lines starting with # are ignored. - Standard glob patterns work. - You can start patterns with a forward slash (/) to avoid recursivity. - You can end patterns with a forward slash (/) to specify a directory. - You can negate a pattern by starting it with an exclamation point (!). Viewing Your Staged and Unstaged Changes git status & git diff git diff --staged # see what you 've staged that will go into your next commit. git diff --cached # see that you' ve statged so far. Committing Your Changes git commit -m 'balabala' type commit message inline Skipping the Staging Area git commit -a -m 'balabala' Git automatically stage every file that is already tracked before doing the commit,letting you skip the git add part. Removing Files git rm remove file from your tracked files ,and also removes the file from your working directory. if you modified the file and added it to the index already,you must force the removal with the -f option. another userful thing you may want to do is to keep the file in your tree but remove it from your staging area. To do this ,use the --cached option. Moving Files git mv [oldfilename] [newfilename] = mv [oldfilename] [newfilename] + git rm [newfilename] + git add [newfilename] 1.2 Viewing the Commit History By default,with no arguments, git log lists the commits made in that repository in reverse chronological order - that is ,the most recent commits show up first. git log -p -[number] shows the difference introduced in each commit. git log --stat shows some abbreviated stats for each commit. git log --pretty=[online,short,full,fuller,format] option ‘format' which allows you to specify your own log output fotmat. Userful options for git log –pretty=format & Common option to git log Limiting log Output git log -Sfunction_name Options to limit the output of git log 1.3 Undoing Things One of the common undos takes place when you commit too early and possibly forget to add some files or you mess up your commit message.if you want to try that commit again,you can run commit with the –amend ooption. git commit --amend This command takes your staging area and uses it for the commit. Unstaging a Staged File git reset HEAD [filename] Unmodifying a Modified File git checkout -- [filename] 1.4 Working with Remotes To be able to collaborate on any Git project,you need to know how to manage your remote repositories. Showing Your Remotes git remote -v shows you the URLs that git has stored for the shortname to be used when reading and writing to that remote. Adding Remote Repositories git remote add [shortname] [url] Fetching and Pulling from your Remotes git fetch [remote-name] Pushing to Your Remotes git push [remote-name] [branch-name] Inspecting a Remote git remote show [remote-name] shows more information about a particular remote. Removing and Renaming Remotes git remote rename [old-name] [new-name] git remote remove/rm [remote-name] remove a remote 1.5 Tagging Git has the ability to tag specific points in history as being important. Listing Your Tags git tag lists the tags in alphabetical order Creating Tags Git uses two main types of tags:lightweight and annotated. A loghtweight tag is very much like a branch that doesn't change - it's just a pointer to a specific commit. Annotated tags,however,are stored as full objects in the Git database.They're checksummed;contain the tagger name,email,and date;have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG). Annotated Tags git tag -a [tagname] -m \"message\" Lightweight Tags git tag [tagname] Tagging Later git tag -a [tagname] [sha1code] Sharing Tags git push orign [tagname] git push orign --tags transfer all of your tags to the remote server that are not already there. Checking out Tags git checkout -b [branchname] [tagname] 1.6 Git Aliases If you don't want to type the entire text of each of the Git commands,you can easily set up an alias for each command using git config . git config --global/local alias.[aliasname] [command] 2 Git Branching Branching means you diberge from the main line of development and continue to do work without messing with that main line. ## Branches in a Nutshell When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged. Creating a New Branch git branch [branchname] create a new branch called testing git log --oneline --decorate shows you where rhe branch pointers are pointing. Switching Branches git checkout [branchname] this moves HEAD to point to the branch. git log --oneline --decorate --graph --all Divergent history 2.1 Basic Branching and Merging Basic Branching git checkout -b [branchname] switch branch git merge [branchname] merge branch git branch -d [branchname] delete branch Basic Merging git merge [branchname] Basic Merge Conflicts Occasionally,this process doesn't go smoothly.If you changed the same part of the same file differently in the two branches you're merging together.Git hasn't automatically created a new merge commit. It has paused the process while you resolve the conflict. If you want to use a graphical tool to resolve these issues, you can run git mergetool . git mergetool Advanced Merging 2.2 Branch Management The git branch command does more than just create and detele branches. git branch -v #shows the last commit on each branch. git branch --merged/nomerged # filter this list to branches git branch -d [branchname] # detele the branch and lose that work. 2.3 Branching Workflows cover some common workflows that this lightweight branching makes possible. Brancheing Workflows 2.4 Remote Branches Remote references are references in your remote repositories,includeing branches,tags,and so on. you can get a full list of remote references explicitly with git ls-remote [remote] or `git remote show [remote] gor remote branches as well as more information. Pushing git push [remote] [branch]/[localbranch]:[remotebranch] The next time one of yoour collaborators fetches from the server.It's important to note that when you do a fetch that brings down new remote-tracking branches,you don't qutomatically have local,editable copies of them. To merge this work into your current working branch,you can run git merge origin/[branchmane] . git checkout -b [branchname] orgin/[branchname] create local branch base on remote branch Tracking Branches git checkout --track orgin/[branchname] In fact,this is so common that there's even a shortcut for that shortcut.if the branch name you're trying to checkout doesn't exist add exactly matches a name on only one remote.Git will create a tracking branch for you. If you already have a local brach and want to set it to a remote branch you just pulled down,or want to change the upsteam branch you're tracking. git branch -u origin/[branchname] git branch -vv # show what tracking branches you have set up. git fetch --all ; git branch -vv # fetch from all your remotes Pulling git pull Deleting Remote Branches git push origin --delete [branchname] detele remote branch 2.5 Rebasing In Git, there are two main ways to integrate changes from one branch into another: the merge and the rebase . The Basic Rebase rebase a branch to master git checkout [branchname] git rebase master git checkout master git merge [branchname] There is no difference in the end product of the integration,but rebasing makes for a cleaner history. Rebasing replays changes from one line of work onto another in the order they were introduced,whereas merging takes the endpoints and merges them together. More Intersting Rebases git rebase --onto master [firstbranchname] [secondbranchname] Take the second branch forgure out the patches since it diverged from the first branch ,and replay these patches in the secondbranch as if it was based directly off master branch instead. A history with a topic branch off another topic branch The Perils of Rebasing Don not rebase commits that exist outside your repository Figure Rebase vs. Merge In general the way to get the best of both worlds is to rebase local changes you've made but haven't shared yet before you puch them in order to clean up your story,but never rebase anything you've pushed somewhere. 3 Distributed Git Git in a distributed environment as a contributor and an integretor. 3.1 Distributed Workflows Integration-Mannger Workflows Integration-Manager Workflow Figure TODO 4 Git Tools 4.1 Revision Selection Short SHA-1 git log --abbrev-commit --pretty=oneline git show [shasum] 4.2 Commit Ranges Double Dot This basically asks Git to resolve a range of commits that are reachable from one commit but aren't reachable from another. git log master..experiment show a log of just those commits with master..experiment — that means \"all commits reachable from experiment that aren't reachable from master. Multiple Points Git allows you to do this by using either the &#94; character or –not before any reference from which you don't want to see reachable commits. git log refA..refB git log &#94;refA refB git log refB --not refA Triple Dot specifies all the commits that are reachable by either of two references but not by both of them. git log master...experiment see what is in master or experiment but not any common references 5 Reference Pro Git","tags":"Tech","url":"https://cnewbie.github.io/blog/2017/git-pro-en/"},{"title":"Hello World","text":"Hello World code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Hello World Hello World!!!","tags":"Tech","url":"https://cnewbie.github.io/blog/2017/hello-world-en/"}]}